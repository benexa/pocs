1. Add Maven Dependencies
Group ID 						Artifact ID 			Version 			Description
org.springframework.security 	spring-security-core 	3.2.1.RELEASE 		Spring Security core module
org.springframework.security 	spring-security-web 	3.2.1.RELEASE 		Spring Security web module
org.springframework.security 	spring-security-config 	3.2.1.RELEASE 		Spring Security configuration module
org.springframework.security 	spring-security-taglibs 3.2.1.RELEASE 		Spring Security JSP tag library

2. configure a filter in the web deployment descriptor (web.xml).
NOTE: security filter mapping should be the first filter configured in web.xml
<!-- Spring Security Configuration -->
<filter>
<filter-name>springSecurityFilterChain</filter-name>
<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
<filter-name>springSecurityFilterChain</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>

3. The next step is to define the Spring Security context security-context.xml, which will be imported by the root WebApplicationContext configuration file. 

SAMPLE
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
xmlns:beans="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd">

<http use-expressions="true">
<intercept-url pattern='/*' access='permitAll' />
<form-login login-page="/contacts" authentication-failure-url="/security/loginfail"
default-target-url="/contacts" />
<logout logout-success-url="/contacts"/>
</http>
<authentication-manager>
<authentication-provider>
<user-service>
<user name="user" password="user" authorities="ROLE_USER" />
</user-service>
</authentication-provider>
</authentication-manager>
</beans:beans>

4. add security-context.xml to application context file
<import resource="classpath:META-INF/spring/security-context.xml"/>

5. To show hide content based on login use <security tags
<sec:authorize access="isAuthenticated()">${labelWelcome}
	<sec:authentication property="principal.username" />
	<br/>
	<a href="${logoutUrl}">${labelLogout}</a>
</sec:authorize>	

6. To hide show content based on login and role use
<sec:authorize access="hasRole('ROLE_USER')">
	<a href="${addContactUrl}"><h3>${menuAddContact}</h3></a>
</sec:authorize>

7. To show content for Anonymous users, e.g. login form use
<sec:authorize access="isAnonymous()">

</sec:authorize>

